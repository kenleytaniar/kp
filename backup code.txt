import streamlit as st
from paddleocr import PaddleOCR, draw_ocr
import cv2
import numpy as np
from PIL import Image
import pandas as pd  # Untuk menyimpan hasil ke spreadsheet

# Function for login page
def login_page():
    st.title("Login")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    
    if st.button("Login"):
        if username == "admin" and password == "password":  # Replace with your validation logic
            st.session_state['logged_in'] = True
        else:
            st.error("Invalid username or password")

# Function for OCR page
def ocr_page():
    # Supported languages (add more languages as needed)
    languages = {
        "English": "en",
        "Arabic": "ar",
        "Hindi": "hi",
        "French":"fr",
        "Indonesian":"id"
    }

    # Default language
    selected_lang = st.sidebar.selectbox("Select Language", list(languages.keys()))
    lang_code = languages[selected_lang]

    # Initialize PaddleOCR
    ocr = PaddleOCR(use_angle_cls=True, lang=lang_code, use_gpu=False)

    # Streamlit app
    st.title('APLIKASI OCR UNTUK PENGENALAN TEKS PADA GAMBAR KTP')

    # Upload image
    uploaded_file = st.file_uploader("Choose an image...", type=['png', 'jpg', 'jpeg'])

    if uploaded_file is not None:
        # Convert the uploaded file to an OpenCV image
        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
        img = cv2.imdecode(file_bytes, cv2.IMREAD_UNCHANGED)
        
        # Display the uploaded image
        st.image(img, channels="BGR")

        # Save the uploaded image to a temporary file
        img_path = 'temp_img.jpg'
        cv2.imwrite(img_path, img)
        
        # Perform OCR
        result = ocr.ocr(img_path, cls=True)

        # Prepare data for saving
        extracted_data = []
        st.subheader("Hasil Teks OCR:")
        for line in result:
            for detection in line:
                text = detection[1][0]
                confidence = detection[1][1]
                extracted_data.append({"Text": text, "Akurasi": confidence})
                st.write(f"-> {text} - Akurasi: {confidence:.2f}")
        
        # Add option to save results to spreadsheet
        if extracted_data:
            df = pd.DataFrame(extracted_data)
            st.subheader("Save OCR Results")
            save_as = st.selectbox("Select format to save", ["Excel", "CSV"])
            if st.button("Save Results"):
                if save_as == "Excel":
                    df.to_excel("ocr_results.xlsx", index=False)
                    st.success("Results saved as ocr_results.xlsx")
                else:
                    df.to_csv("ocr_results.csv", index=False)
                    st.success("Results saved as ocr_results.csv")

# Main function to control the flow
if 'logged_in' not in st.session_state:
    st.session_state['logged_in'] = False

if st.session_state['logged_in']:
    ocr_page()
else:
    login_page()
